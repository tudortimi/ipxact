<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2013 sp1 (http://www.altova.com) by Mark Noll (private) -->
<!--
// Description : commonStructures.xsd
// Author: The Accellera System Initiative IP-XACT Schema Working Group
// 
// Revision:    $Revision: 1537 $
// Date:        $Date: 2010-02-26 13:28:40 -0800 (Fri, 26 Feb 2010) $
// 
// Copyright (c) 2005 - 2012 Accellera Systems Initiative Inc. 
// All rights reserved.
// 
// This source file is provided on an AS IS basis. The Accellera 
// Systems Initiative disclaims any warranty express or implied 
// including any warranty of merchantability and fitness for use 
// for a particular purpose.
// 
// The user of the source file shall indemnify and hold The Accellera 
// Systems Initiative and its members harmless from any damages or liability.
// 
// This file may be copied, and distributed, WITHOUT
// modifications; this notice must be included on any copy.
// 
// This schema shall not be modified, adapted, altered, sublicensed, nor
// any derivative works shall be created based upon the schema.  The
// intended and allowed uses of the schema include:
// 
//  o Creating and validating XML documents that conform to the schema
// 
//  o Building software programs and systems based on the schema
// 
//  o Distributing verbatim copy of the schema as long as the full text
//  of this license is included in all copies of the schema.
//  Specifically, a tool may include full copies of the schema, and these
//  copies may be distributed by the tool provider directly.  A link or
//  URL to the original of the schema is inherent in the schema URI.
// 
//  o Documents which are validated against this schema may also
//  reference additional schema. These additional schemas may provide for
//  validation of elements and attributes at the extension points
//  explicitly and implicitly included in the IEEE 1685-???? standard.
// 
//  o No right to create new schemas derived from parts of this base
//  schema is granted pursuant to this License.
// 
// Users are requested to provide feedback to The Accellera Systems 
// Initiative IP-XACT Schema Working Group using: 
// mailto:ip-xact-swg@lists.accellera.org
 -->
<xs:schema xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" elementFormDefault="qualified">
	<xs:include schemaLocation="autoConfigure.xsd"/>
	<xs:include schemaLocation="simpleTypes.xsd"/>
	<xs:complexType name="moduleParameterType">
		<xs:annotation>
			<xs:documentation>Name value pair with data type information.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="ipxact:parameterType">
				<xs:sequence>
					<xs:element ref="ipxact:isPresent" minOccurs="0"/>
				</xs:sequence>
				<xs:attribute name="dataType" type="xs:string">
					<xs:annotation>
						<xs:documentation>The data type of the argument as pertains to the language. Example: "int", "double", "char *".</xs:documentation>
					</xs:annotation>
				</xs:attribute>
				<xs:attribute name="usageType" default="nontyped">
					<xs:annotation>
						<xs:documentation>Indicates the type of the module parameter. Legal values are defined in the attribute enumeration list. Default value is 'nontyped'.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="nontyped"/>
							<xs:enumeration value="typed"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:element name="parameter" type="ipxact:parameterType">
		<xs:annotation>
			<xs:documentation>A name value pair.  The name is specified by the name element.  The value is in the text content of the value element.  This value element supports all configurability attributes.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="assertion">
		<xs:annotation>
			<xs:documentation>Provides an expression for describing valid parameter value settings.  If a assertion assert expression evaluates false, the name, displayName and/or description can be used to communicate the assertion failure.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="ipxact:nameGroup"/>
				<xs:element name="assert" type="ipxact:unsignedBitExpression"/>
			</xs:sequence>
			<xs:attributeGroup ref="ipxact:id.att"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="assertions">
		<xs:annotation>
			<xs:documentation>List of assertions about allowed parameter values.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:assertion" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="parameters">
		<xs:annotation>
			<xs:documentation>A collection of parameters and associated value assertions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:parameter" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="vendorExtensions">
		<xs:annotation>
			<xs:documentation>Container for vendor specific extensions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:any namespace="##any" processContents="lax" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Accepts any element(s) the content provider wants to put here, including elements from the ipxact namespace.</xs:documentation>
					</xs:annotation>
				</xs:any>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:group name="nameGroup">
		<xs:annotation>
			<xs:documentation>A group of elements for name (xs:name), displayName and description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name" type="xs:Name">
				<xs:annotation>
					<xs:documentation>Unique name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:displayName" minOccurs="0"/>
			<xs:element ref="ipxact:description" minOccurs="0"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="leafAccessHandle">
		<xs:sequence>
    	<xs:element name="viewRef" maxOccurs="unbounded" minOccurs="0">
    		<xs:annotation>
    			<xs:documentation>A list of views this accessHandle is applicable to. Note this element is optional, if it is not present the accessHandle applies to all views.</xs:documentation>
    		</xs:annotation>
    		<xs:complexType>
    			<xs:simpleContent>
    				<xs:extension base="xs:Name">
    					<xs:attributeGroup ref="ipxact:id.att"/>
    				</xs:extension>
    			</xs:simpleContent>
    		</xs:complexType>
    	</xs:element>
			<xs:element name="indices" minOccurs="0">
				<xs:annotation>
					<xs:documentation>For a multi dimensional IP-XACT object, indices can be specified to select the element the accessHandle applies to. This is an index into a multi-dimensional array and follows C-semantics for indexing.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="index" type="ipxact:unsignedIntExpression" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>An index into the IP-XACT object.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="slices" type="ipxact:slicesType"/>
		</xs:sequence>
		<xs:attribute name="force" type="xs:boolean" default="true"/>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="nonIndexedLeafAccessHandle">
		<xs:sequence>
    	<xs:element name="viewRef" maxOccurs="unbounded" minOccurs="0">
    		<xs:annotation>
    			<xs:documentation>A list of views this accessHandle is applicable to. Note this element is optional, if it is not present the accessHandle applies to all views.</xs:documentation>
    		</xs:annotation>
    		<xs:complexType>
    			<xs:simpleContent>
    				<xs:extension base="xs:Name">
    					<xs:attributeGroup ref="ipxact:id.att"/>
    				</xs:extension>
    			</xs:simpleContent>
    		</xs:complexType>
    	</xs:element>
			<xs:element name="slices" type="ipxact:slicesType"/>
		</xs:sequence>
		<xs:attribute name="force" type="xs:boolean" default="true"/>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="indexedAccessHandle">
		<xs:sequence>
    	<xs:element name="viewRef" maxOccurs="unbounded" minOccurs="0">
    		<xs:annotation>
    			<xs:documentation>A list of views this accessHandle is applicable to. Note this element is optional, if it is not present the accessHandle applies to all views.</xs:documentation>
    		</xs:annotation>
    		<xs:complexType>
    			<xs:simpleContent>
    				<xs:extension base="xs:Name">
    					<xs:attributeGroup ref="ipxact:id.att"/>
    				</xs:extension>
    			</xs:simpleContent>
    		</xs:complexType>
    	</xs:element>
			<xs:element name="indices" minOccurs="0">
				<xs:annotation>
					<xs:documentation>For a multi dimensional IP-XACT object, indices can be specified to select the element the accessHandle applies to. This is an index into a multi-dimensional array and follows C-semantics for indexing.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="index" type="ipxact:unsignedIntExpression" maxOccurs="unbounded">
							<xs:annotation>
								<xs:documentation>An index into the IP-XACT object.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="pathSegments">
				<xs:annotation>
					<xs:documentation>An ordered list of pathSegment elements. When concatenated with a desired separator the elements in this form a HDL path for the parent slice into the referenced view.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="pathSegment" type="ipxact:pathSegmentType" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="simpleAccessHandle">
		<xs:sequence>
    	<xs:element name="viewRef" maxOccurs="unbounded" minOccurs="0">
    		<xs:annotation>
    			<xs:documentation>A list of views this accessHandle is applicable to. Note this element is optional, if it is not present the accessHandle applies to all views.</xs:documentation>
    		</xs:annotation>
    		<xs:complexType>
    			<xs:simpleContent>
    				<xs:extension base="xs:Name">
    					<xs:attributeGroup ref="ipxact:id.att"/>
    				</xs:extension>
    			</xs:simpleContent>
    		</xs:complexType>
    	</xs:element>
			<xs:element name="pathSegments">
				<xs:annotation>
					<xs:documentation>An ordered list of pathSegment elements. When concatenated with a desired separator the elements in this form a HDL path for the parent slice into the referenced view.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="pathSegment" type="ipxact:pathSegmentType" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="slicesType">
		<xs:annotation>
			<xs:documentation>Each slice specifies the HDL path for part of the parent IP-XACT object. The slices must be concatenated to calculate the entire path. If there is only one slice, it is assumed to be the path for the entire IP-XACT object.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="slice" type="ipxact:sliceType" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>The HDL path for a slice of the IP-XACT object.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="sliceType">
		<xs:annotation>
			<xs:documentation>Contains the HDL path information for a slice of the IP-XACT object. </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="pathSegments">
				<xs:annotation>
					<xs:documentation>An ordered list of pathSegment elements. When concatenated with a desired separator the elements in this form a HDL path for the parent slice into the referenced view.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="pathSegment" type="ipxact:pathSegmentType" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element ref="ipxact:range" minOccurs="0">
				<xs:annotation>
					<xs:documentation>A range to be applied to the concatenation of the above path segments</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="pathSegmentType">
		<xs:annotation>
			<xs:documentation>Identifies one level of hierarchy in the view specifed by viewNameRef. This is a simple name and optionally some indices into a multi dimensional element.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="pathSegmentName" type="xs:string">
				<xs:annotation>
					<xs:documentation>One section of a HDL path</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="indices" type="ipxact:indicesType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Specifies a multi-dimensional index into pathSegementName</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:element name="right" type="ipxact:unsignedIntExpression">
		<xs:annotation>
			<xs:documentation>The optional element right specifies the right boundary.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="left" type="ipxact:unsignedIntExpression">
		<xs:annotation>
			<xs:documentation>The optional element left specifies the left boundary.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:group name="nameGroupOptional">
		<xs:annotation>
			<xs:documentation>A group of elements for name (xs:name), displayName and description where the name is optional</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name" type="xs:Name" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Unique name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:displayName" minOccurs="0"/>
			<xs:element ref="ipxact:description" minOccurs="0"/>
		</xs:sequence>
	</xs:group>
	<xs:group name="nameGroupNMTOKEN">
		<xs:annotation>
			<xs:documentation>A group of elements for name(xs:NMTOKEN), displayName and description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name" type="xs:NMTOKEN">
				<xs:annotation>
					<xs:documentation>Unique name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:displayName" minOccurs="0"/>
			<xs:element ref="ipxact:description" minOccurs="0"/>
		</xs:sequence>
	</xs:group>
	<xs:group name="nameGroupPort">
		<xs:annotation>
			<xs:documentation>A group of elements for name(portName), displayName and description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name" type="ipxact:portName">
				<xs:annotation>
					<xs:documentation>Unique name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:displayName" minOccurs="0"/>
			<xs:element ref="ipxact:description" minOccurs="0"/>
		</xs:sequence>
	</xs:group>
	<xs:complexType name="parameterBaseType">
		<xs:annotation>
			<xs:documentation>Name and value type for use in resolvable elements</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="ipxact:nameGroupString"/>
			<xs:element ref="ipxact:vectors" minOccurs="0"/>
			<xs:element name="arrays" type="ipxact:configurableArrays" minOccurs="0"/>
			<xs:element name="value" type="ipxact:complexBaseExpression">
				<xs:annotation>
					<xs:documentation>The value of the parameter.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:vendorExtensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="parameterId" type="xs:Name">
			<xs:annotation>
				<xs:documentation>ID attribute for uniquely identifying a parameter within its document. Attribute is used to refer to this from a configurable element.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="prompt" type="xs:string">
			<xs:annotation>
				<xs:documentation>Provides a string used to prompt the user for user-resolved property values.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="choiceRef" type="xs:Name">
			<xs:annotation>
				<xs:documentation>For user defined properties, refers the choice element enumerating the values to choose from.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="order" type="xs:float">
			<xs:annotation>
				<xs:documentation>For components with auto-generated configuration forms, the user-resolved properties with order attibutes will be presented in ascending order.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="configGroups" type="xs:NMTOKENS">
			<xs:annotation>
				<xs:documentation>Tags configurable properties so that they may be grouped together.  Configurable properties with matching values for this attribute are contained in the same group. The format of this attribute is a string. There is no semantic meaning to this attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="minimum" type="xs:string">
			<xs:annotation>
				<xs:documentation>For user-resolved properties with numeric values, this indicates the minimum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="maximum" type="xs:string">
			<xs:annotation>
				<xs:documentation>For user-resolved properties with numeric values, this indicates the maximum value allowed. Only valid for the types: byte, shortint, int, longint, shortreal and real. The type of this value is the same as the type of the parameter-value, which is specified by the parameter-type attribute.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="type" type="ipxact:formatType" default="string">
			<xs:annotation>
				<xs:documentation>Specifies the type of the value of the parameter. A parameter of type byte is resolved to an 8-bit integer value, shortint is resolved to a 16-bit integer value, int is resolved to a 32-bit integer value, longint is resolved to a 64-bit integer value, shortreal is resolved to a 32-bit floating point value, real is resolved to a 64-bit floating point value, bit is by default resolved to a one bit value, unless a vector size has been specified and the string type is resolved to a string value.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="sign" type="ipxact:signType">
			<xs:annotation>
				<xs:documentation>Specify the signedness explicitly. The data types byte, shortint, int, longint default to signed. The data type bit defaults to unsigned. When setting this values for the data types string, real and shortreal the setting is ignored.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="prefix">
			<xs:annotation>
				<xs:documentation>Defines the prefix that precedes the unit of a value. The prefix is not applied to the value (e.g. in calculations).</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="deca"/>
					<xs:enumeration value="hecto"/>
					<xs:enumeration value="kilo"/>
					<xs:enumeration value="mega"/>
					<xs:enumeration value="giga"/>
					<xs:enumeration value="tera"/>
					<xs:enumeration value="peta"/>
					<xs:enumeration value="exa"/>
					<xs:enumeration value="zetta"/>
					<xs:enumeration value="yotta"/>
					<xs:enumeration value="deci"/>
					<xs:enumeration value="centi"/>
					<xs:enumeration value="milli"/>
					<xs:enumeration value="micro"/>
					<xs:enumeration value="nano"/>
					<xs:enumeration value="pico"/>
					<xs:enumeration value="femto"/>
					<xs:enumeration value="atto"/>
					<xs:enumeration value="zepto"/>
					<xs:enumeration value="yocto"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="unit">
			<xs:annotation>
				<xs:documentation>Defines the unit of the value.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="second"/>
					<xs:enumeration value="ampere"/>
					<xs:enumeration value="kelvin"/>
					<xs:enumeration value="hertz"/>
					<xs:enumeration value="joule"/>
					<xs:enumeration value="watt"/>
					<xs:enumeration value="coulomb"/>
					<xs:enumeration value="volt"/>
					<xs:enumeration value="farad"/>
					<xs:enumeration value="ohm"/>
					<xs:enumeration value="siemens"/>
					<xs:enumeration value="henry"/>
					<xs:enumeration value="Celsius"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="ipxact:any.att"/>
	</xs:complexType>
	<xs:complexType name="parameterType">
		<xs:complexContent>
			<xs:extension base="ipxact:parameterBaseType">
				<xs:attribute name="resolve" default="immediate">
					<xs:annotation>
						<xs:documentation>Determines how a property value can be configured.</xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:annotation>
							<xs:documentation>Determines how a parameter is resolved. User means the value must be obtained from the user. Generated means the value will be provided by a generator.</xs:documentation>
						</xs:annotation>
						<xs:restriction base="xs:token">
							<xs:enumeration value="immediate">
								<xs:annotation>
									<xs:documentation>Property content cannot be modified through configuration.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value="user">
								<xs:annotation>
									<xs:documentation>Property content can be modified through configuration. Modifications will be saved with the design.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
							<xs:enumeration value="generated">
								<xs:annotation>
									<xs:documentation>Generators may modify this property. Modifications get saved with the design.</xs:documentation>
								</xs:annotation>
							</xs:enumeration>
						</xs:restriction>
					</xs:simpleType>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="nameValuePairType">
		<xs:annotation>
			<xs:documentation>Name and value type for use in resolvable elements</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="ipxact:nameGroupString"/>
			<xs:element ref="ipxact:value"/>
			<xs:element ref="ipxact:vendorExtensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:element name="vector">
		<xs:annotation>
			<xs:documentation>Left and right ranges of the vector.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:left"/>
				<xs:element ref="ipxact:right"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="vectors">
		<xs:annotation>
			<xs:documentation>Vectored information.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:vector" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="range">
		<xs:annotation>
			<xs:documentation>Left and right bound of a reference into a vector.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:left"/>
				<xs:element ref="ipxact:right"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="partSelect">
		<xs:annotation>
			<xs:documentation>Bit range definition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="ipxact:range"/>
				<xs:sequence>
					<xs:element name="indices" type="ipxact:indicesType"/>
					<xs:element ref="ipxact:range" minOccurs="0"/>
				</xs:sequence>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="configurableArrays">
		<xs:sequence>
			<xs:element name="array" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Specific left and right array bounds.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="ipxact:left"/>
						<xs:element ref="ipxact:right"/>
					</xs:sequence>
					<xs:attributeGroup ref="ipxact:id.att"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="value" type="ipxact:stringExpression">
		<xs:annotation>
			<xs:documentation>The value of the parameter.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:group name="nameGroupString">
		<xs:annotation>
			<xs:documentation>A group of elements for name(xs:string), displayName and description</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="name" type="xs:string">
				<xs:annotation>
					<xs:documentation>Unique name</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:displayName" minOccurs="0"/>
			<xs:element ref="ipxact:description" minOccurs="0"/>
		</xs:sequence>
	</xs:group>
	<xs:element name="displayName" type="xs:string">
		<xs:annotation>
			<xs:documentation>Element name for display purposes. Typically a few words providing a more detailed and/or user-friendly name than the ipxact:name.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="description" type="xs:string">
		<xs:annotation>
			<xs:documentation>Full description string, typically for documentation</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="isPresent" type="ipxact:unsignedBitExpression">
		<xs:annotation>
			<xs:documentation>Expression that determines whether the enclosing element should be treated as present (expression evaluates to "true") or disregarded (expression evalutes to "false")</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="activeCondition" type="ipxact:unsignedBitExpression">
		<xs:annotation>
			<xs:documentation>Expression that determines whether the enclosing element responds to read or write accesses to its specified address location. The expression can include dynamic values referencing register/field values and component states.  If it evaluates to true, then the enclosing register can be accessed per its mapping and access specification.  If it evaluates to false, the enclosing register/field cannot be accessed.  If a register does not include an activeCondition or alternateRegister(s), then the register is uncondiitionally accessible.  If a register does not include an activeCondition, but does include alternateRegister(s), then the condition that determines which is accessible is considered unspecified.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="indicesType">
		<xs:sequence>
			<xs:element name="index" type="ipxact:unsignedIntExpression" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>An index into an object in the referenced view.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
