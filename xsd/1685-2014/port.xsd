<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2013 sp1 (http://www.altova.com) by Mark Noll (private) -->
<!--
// Description : port.xsd
// Author: The Accellera System Initiative IP-XACT Schema Working Group
// 
// Revision:    $Revision: 1537 $
// Date:        $Date: 2010-02-26 13:28:40 -0800 (Fri, 26 Feb 2010) $
// 
// Copyright (c) 2005 - 2012 Accellera Systems Initiative Inc. 
// All rights reserved.
// 
// This source file is provided on an AS IS basis. The Accellera 
// Systems Initiative disclaims any warranty express or implied 
// including any warranty of merchantability and fitness for use 
// for a particular purpose.
// 
// The user of the source file shall indemnify and hold The Accellera 
// Systems Initiative and its members harmless from any damages or liability.
// 
// This file may be copied, and distributed, WITHOUT
// modifications; this notice must be included on any copy.
// 
// This schema shall not be modified, adapted, altered, sublicensed, nor
// any derivative works shall be created based upon the schema.  The
// intended and allowed uses of the schema include:
// 
//  o Creating and validating XML documents that conform to the schema
// 
//  o Building software programs and systems based on the schema
// 
//  o Distributing verbatim copy of the schema as long as the full text
//  of this license is included in all copies of the schema.
//  Specifically, a tool may include full copies of the schema, and these
//  copies may be distributed by the tool provider directly.  A link or
//  URL to the original of the schema is inherent in the schema URI.
// 
//  o Documents which are validated against this schema may also
//  reference additional schema. These additional schemas may provide for
//  validation of elements and attributes at the extension points
//  explicitly and implicitly included in the IEEE 1685-???? standard.
// 
//  o No right to create new schemas derived from parts of this base
//  schema is granted pursuant to this License.
// 
// Users are requested to provide feedback to The Accellera Systems 
// Initiative IP-XACT Schema Working Group using: 
// mailto:ip-xact-swg@lists.accellera.org
 -->
<xs:schema xmlns:ipxact="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.accellera.org/XMLSchema/IPXACT/1685-2014" elementFormDefault="qualified">
	<xs:include schemaLocation="commonStructures.xsd"/>
	<xs:include schemaLocation="constraints.xsd"/>
	<xs:include schemaLocation="file.xsd"/>
	<xs:include schemaLocation="subInstances.xsd"/>
	<xs:simpleType name="componentPortDirectionType">
		<xs:annotation>
			<xs:documentation>The direction of a component port.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="in"/>
			<xs:enumeration value="out"/>
			<xs:enumeration value="inout"/>
			<xs:enumeration value="phantom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="portType">
		<xs:annotation>
			<xs:documentation>A port description, giving a name and an access type for high level ports. </xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:group ref="ipxact:nameGroupPort"/>
			<xs:element ref="ipxact:isPresent" minOccurs="0"/>
			<xs:choice>
				<xs:annotation>
					<xs:documentation>Port style</xs:documentation>
				</xs:annotation>
				<xs:element name="wire" type="ipxact:portWireType">
					<xs:annotation>
						<xs:documentation>Defines a port whose type resolves to simple bits.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="transactional" type="ipxact:portTransactionalType">
					<xs:annotation>
						<xs:documentation>Defines a port that implements or uses a service that can be implemented with functions or methods.</xs:documentation>
					</xs:annotation>
				</xs:element>
			</xs:choice>
			<xs:element ref="ipxact:arrays" minOccurs="0"/>
			<xs:element name="access" type="ipxact:portAccessType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Port access characteristics.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:vendorExtensions" minOccurs="0"/>
		</xs:sequence>
		<xs:attributeGroup ref="ipxact:id.att"/>
	</xs:complexType>
	<xs:complexType name="abstractorPortType">
		<xs:annotation>
			<xs:documentation>A port description, giving a name and an access type for high level ports. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ipxact:portType">
				<xs:sequence>
					<xs:sequence>
						<xs:group ref="ipxact:nameGroupPort"/>
						<xs:element ref="ipxact:isPresent" minOccurs="0"/>
						<xs:choice>
							<xs:annotation>
								<xs:documentation>Port style</xs:documentation>
							</xs:annotation>
							<xs:element name="wire" type="ipxact:abstractorPortWireType">
								<xs:annotation>
									<xs:documentation>Defines a port whose type resolves to simple bits.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="transactional" type="ipxact:portTransactionalType">
								<xs:annotation>
									<xs:documentation>Defines a port that implements or uses a service that can be implemented with functions or methods.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
						<xs:sequence>
							<xs:element name="access" type="ipxact:portAccessType" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Port access characteristics.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:sequence>
					</xs:sequence>
					<xs:sequence>
						<xs:element ref="ipxact:vendorExtensions" minOccurs="0"/>
					</xs:sequence>
				</xs:sequence>
				<xs:attributeGroup ref="ipxact:id.att"/>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>
	<xs:simpleType name="initiativeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="requires"/>
			<xs:enumeration value="provides"/>
			<xs:enumeration value="both"/>
			<xs:enumeration value="phantom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="initiative" type="ipxact:initiativeType">
		<xs:annotation>
			<xs:documentation>If this element is present, the type of access is restricted to the specified value.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="busWidth" type="ipxact:unsignedIntExpression">
		<xs:annotation>
			<xs:documentation>defines the bus size in bits. This can be the result of an expression.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="protocol">
		<xs:annotation>
			<xs:documentation>defines the protocol type. Defaults to tlm_base_protocol_type for TLM sockets</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="protocolType">
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="ipxact:protocolTypeType">
								<xs:attribute name="custom" type="xs:string"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="ipxact:payload" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="protocolTypeType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="tlm"/>
			<xs:enumeration value="custom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="kindType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="tlm_port"/>
			<xs:enumeration value="tlm_socket"/>
			<xs:enumeration value="simple_socket"/>
			<xs:enumeration value="multi_socket"/>
			<xs:enumeration value="custom"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="kind">
		<xs:annotation>
			<xs:documentation>Defines the protocol type. Defaults to tlm_base_protocol_type for TLM sockets</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:simpleContent>
				<xs:extension base="ipxact:kindType">
					<xs:attribute name="custom" type="xs:string"/>
				</xs:extension>
			</xs:simpleContent>
		</xs:complexType>
	</xs:element>
	<xs:simpleType name="simplePortAccessType">
		<xs:restriction base="xs:string">
			<xs:enumeration value="ref"/>
			<xs:enumeration value="ptr"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="portAccessType" type="ipxact:simplePortAccessType">
		<xs:annotation>
			<xs:documentation>Indicates how a netlister accesses a port. 'ref' means accessed by reference (default) and 'ptr' means accessed by pointer.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="payload">
		<xs:annotation>
			<xs:documentation>defines the structure of data transported by this port</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="name" type="xs:string" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the name of the payload. For example: TLM2 or TLM1</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="type">
					<xs:annotation>
						<xs:documentation>Defines the type of the payload. </xs:documentation>
					</xs:annotation>
					<xs:simpleType>
						<xs:restriction base="xs:string">
							<xs:enumeration value="generic"/>
							<xs:enumeration value="specific"/>
						</xs:restriction>
					</xs:simpleType>
				</xs:element>
				<xs:element name="extension" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the name of the payload extension. If attribute is not specified, it is by default optional.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attribute name="mandatory" type="xs:boolean" use="optional" default="false">
									<xs:annotation>
										<xs:documentation>True if the payload extension is mandatory.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="ipxact:vendorExtensions" minOccurs="0"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="typeParameters">
		<xs:annotation>
			<xs:documentation>list of port type parameters (e.g. template or constructor parameters for a systemC port or socket)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:typeParameter" minOccurs="0" maxOccurs="unbounded"/>
				<xs:element ref="ipxact:serviceTypeDef" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="typeParameter" type="ipxact:moduleParameterType">
		<xs:annotation>
			<xs:documentation>A typed parameter name value pair. The optional attribute dataType defines the type of the value and the usageType attribute indicates how the parameter is to be used.
			</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="transTypeDef">
		<xs:annotation>
			<xs:documentation>Definition of a single transactional type defintion</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="typeName" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The name of the port type. Can be any predefined type such sc_port or sc_export in SystemC or any user-defined type such as tlm_port.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attribute name="exact" type="xs:boolean" default="true">
									<xs:annotation>
										<xs:documentation>When false, defines that the type is an abstract type that may not be related to an existing type in the language of the referenced view.</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="typeDefinition" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Where the definition of the type is contained. For SystemC and SystemVerilog it is the include file containing the type definition.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attributeGroup ref="ipxact:id.att"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="ipxact:typeParameters" minOccurs="0"/>
				<xs:element name="viewRef" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>A reference to a view name in the file for which this type applies.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:NMTOKEN">
								<xs:attributeGroup ref="ipxact:id.att"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="ipxact:id.att"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="serviceTypeDef">
		<xs:annotation>
			<xs:documentation>Definition of a single service type defintion</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="typeName">
					<xs:annotation>
						<xs:documentation>The name of the service type. Can be any predefined type such as booean or integer or any user-defined type such as addr_type or data_type.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attribute name="implicit" type="xs:boolean" default="false">
									<xs:annotation>
										<xs:documentation>Defines that the typeName supplied for this service is implicit and a netlister should not declare this service in
a language specific top-level netlist </xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="typeDefinition" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Where the definition of the type is contained if the type if not part of the language. For SystemC and SystemVerilog it is the include file containing the type definition.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attributeGroup ref="ipxact:id.att"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="ipxact:typeParameters" minOccurs="0"/>
			</xs:sequence>
			<xs:attributeGroup ref="ipxact:id.att"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="wireTypeDef">
		<xs:annotation>
			<xs:documentation>Definition of a single wire type defintion that can relate to multiple views.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="typeName" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The name of the logic type. Examples could be std_logic, std_ulogic, std_logic_vector, sc_logic, ...</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attribute name="constrained" type="xs:boolean" default="false">
									<xs:annotation>
										<xs:documentation>Defines that the type for the port has constrainted the number of bits in the vector</xs:documentation>
									</xs:annotation>
								</xs:attribute>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="typeDefinition" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Where the definition of the type is contained. For std_logic, this is contained in IEEE.std_logic_1164.all. For sc_logic, this is contained in systemc.h. For VHDL this is the library and package as defined by the "used" statement. For SystemC and SystemVerilog it is the include file required. For verilog this is not needed.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:string">
								<xs:attributeGroup ref="ipxact:id.att"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="viewRef" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>A reference to a view name in the file for which this type applies.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:simpleContent>
							<xs:extension base="xs:NMTOKEN">
								<xs:attributeGroup ref="ipxact:id.att"/>
							</xs:extension>
						</xs:simpleContent>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="ipxact:id.att"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="serviceTypeDefs">
		<xs:annotation>
			<xs:documentation>The group of type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:serviceTypeDef" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="wireTypeDefs">
		<xs:annotation>
			<xs:documentation>The group of wire type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:wireTypeDef" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
		<xs:unique name="wireTypeDefsKey">
			<xs:selector xpath="ipxact:wireTypeDef/ipxact:viewRef"/>
			<xs:field xpath="."/>
		</xs:unique>
	</xs:element>
	<xs:element name="transTypeDefs">
		<xs:annotation>
			<xs:documentation>The group of transactional type definitions. If no match to a viewName is found then the default language types are to be used. See the User Guide for these default types.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="ipxact:transTypeDef" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
		<xs:unique name="transTypeDefsKey">
			<xs:selector xpath="ipxact:transTypeDef/ipxact:viewRef"/>
			<xs:field xpath="."/>
		</xs:unique>
	</xs:element>
	<xs:element name="port" type="ipxact:portType">
		<xs:annotation>
			<xs:documentation>Describes port characteristics.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:complexType name="portWireType">
		<xs:annotation>
			<xs:documentation>Wire port type for a component.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="direction" type="ipxact:componentPortDirectionType">
				<xs:annotation>
					<xs:documentation>The direction of a wire style port. The basic directions for a port are 'in' for input ports, 'out' for output port and 'inout' for bidirectional and tristate ports. 
A value of 'phantom' is also allowed and define a port that exist on the IP-XACT component but not on the HDL model.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:vectors" minOccurs="0"/>
			<xs:element ref="ipxact:wireTypeDefs" minOccurs="0"/>
			<xs:element ref="ipxact:drivers" minOccurs="0"/>
			<xs:element ref="ipxact:constraintSets" minOccurs="0"/>
		</xs:sequence>
		<xs:attribute name="allLogicalDirectionsAllowed" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>True if logical ports with different directions from the physical port direction may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all direction value to be mapped onto the physical port. Also ignored for inout ports, since any logical port maybe mapped to a physical inout port.            	</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="portTransactionalType">
		<xs:annotation>
			<xs:documentation>Transactional port type.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element ref="ipxact:initiative">
				<xs:annotation>
					<xs:documentation>Defines how the port accesses this service.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:kind" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Define the kind of transactional port</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:busWidth" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Defines the bus width in bits.This can be the result of an expression.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:protocol" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Defines the protocol type. Defaults to tlm_base_protocol_type for TLM sockets</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="ipxact:transTypeDefs" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Definition of the port type expressed in the default language for this port (i.e. SystemC or SystemV).</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="connection" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Bounds number of legal connections.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:element name="maxConnections" type="ipxact:unsignedIntExpression" default="0" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Indicates the maximum number of connections this port supports. If this element is not present or set to 0 it implies an unbounded number of allowed connections.</xs:documentation>
							</xs:annotation>
						</xs:element>
						<xs:element name="minConnections" type="ipxact:unsignedIntExpression" default="1" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Indicates the minimum number of connections this port supports. If this element is not present, the minimum number of allowed connections is 1.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="allLogicalInitiativesAllowed" type="xs:boolean" use="optional" default="false">
			<xs:annotation>
				<xs:documentation>True if logical ports with different initiatives from the physical port initiative may be mapped onto this port. Forbidden for phantom ports, which always allow logical ports with all initiatives value to be mapped onto the physical port. Also ignored for "both" ports, since any logical port may be mapped to a physical "both" port.
				</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="abstractorPortWireType">
		<xs:annotation>
			<xs:documentation>Wire port type for an abstractor.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:restriction base="ipxact:portWireType">
				<xs:sequence>
					<xs:element name="direction" type="ipxact:componentPortDirectionType"/>
					<xs:element ref="ipxact:vectors" minOccurs="0"/>
					<xs:element ref="ipxact:wireTypeDefs" minOccurs="0"/>
					<xs:element ref="ipxact:drivers" minOccurs="0"/>
				</xs:sequence>
			</xs:restriction>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="portAccessType">
		<xs:sequence>
			<xs:element ref="ipxact:portAccessType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Indicates how a netlister accesses a port. 'ref' means accessed by reference (default) and 'ptr' means accessed through a pointer.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="accessHandles" minOccurs="0">
				<xs:complexType>
					<xs:sequence maxOccurs="unbounded">
						<xs:element name="accessHandle" type="ipxact:leafAccessHandle"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="arrays" type="ipxact:configurableArrays"/>
</xs:schema>
